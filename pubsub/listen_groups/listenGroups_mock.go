// Code generated by MockGen. DO NOT EDIT.
// Source: ./pubsub/listen_groups/listenGroups.go

// Package listen_groups is a generated GoMock package.
package listen_groups

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListenGroupHandler is a mock of ListenGroupHandler interface.
type MockListenGroupHandler struct {
	ctrl     *gomock.Controller
	recorder *MockListenGroupHandlerMockRecorder
}

// MockListenGroupHandlerMockRecorder is the mock recorder for MockListenGroupHandler.
type MockListenGroupHandlerMockRecorder struct {
	mock *MockListenGroupHandler
}

// NewMockListenGroupHandler creates a new mock instance.
func NewMockListenGroupHandler(ctrl *gomock.Controller) *MockListenGroupHandler {
	mock := &MockListenGroupHandler{ctrl: ctrl}
	mock.recorder = &MockListenGroupHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenGroupHandler) EXPECT() *MockListenGroupHandlerMockRecorder {
	return m.recorder
}

// CreateListenGroup mocks base method.
func (m *MockListenGroupHandler) CreateListenGroup(s ListenerId, topic string) (chan ForwardedMessage, ListenGroupDestroyedChan) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListenGroup", s, topic)
	ret0, _ := ret[0].(chan ForwardedMessage)
	ret1, _ := ret[1].(ListenGroupDestroyedChan)
	return ret0, ret1
}

// CreateListenGroup indicates an expected call of CreateListenGroup.
func (mr *MockListenGroupHandlerMockRecorder) CreateListenGroup(s, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListenGroup", reflect.TypeOf((*MockListenGroupHandler)(nil).CreateListenGroup), s, topic)
}

// JoinListenGroup mocks base method.
func (m *MockListenGroupHandler) JoinListenGroup(s ListenerId, topic string) (chan ForwardedMessage, ListenGroupDestroyedChan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinListenGroup", s, topic)
	ret0, _ := ret[0].(chan ForwardedMessage)
	ret1, _ := ret[1].(ListenGroupDestroyedChan)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// JoinListenGroup indicates an expected call of JoinListenGroup.
func (mr *MockListenGroupHandlerMockRecorder) JoinListenGroup(s, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinListenGroup", reflect.TypeOf((*MockListenGroupHandler)(nil).JoinListenGroup), s, topic)
}

// LeaveListenGroup mocks base method.
func (m *MockListenGroupHandler) LeaveListenGroup(s ListenerId, topic string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveListenGroup", s, topic)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveListenGroup indicates an expected call of LeaveListenGroup.
func (mr *MockListenGroupHandlerMockRecorder) LeaveListenGroup(s, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveListenGroup", reflect.TypeOf((*MockListenGroupHandler)(nil).LeaveListenGroup), s, topic)
}

// MessageGroup mocks base method.
func (m *MockListenGroupHandler) MessageGroup(msg ForwardedMessage, topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageGroup", msg, topic)
}

// MessageGroup indicates an expected call of MessageGroup.
func (mr *MockListenGroupHandlerMockRecorder) MessageGroup(msg, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageGroup", reflect.TypeOf((*MockListenGroupHandler)(nil).MessageGroup), msg, topic)
}
